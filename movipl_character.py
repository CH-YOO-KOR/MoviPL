# -*- coding: utf-8 -*-
"""MoviPL-Character

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e4NajIJM06eJ5oSxO_ESeTcAdDIC2KX_
"""

# ===================================================================
# ⚙️ 1. 환경 설정 및 라이브러리 설치
# ===================================================================
# 프로젝트에 필요한 라이브러리를 설치합니다.
!pip install requests spotipy openai

# ===================================================================
# 🔑 2. API Key 보안 관리
# ===================================================================
# [중요!] 코랩 좌측의 열쇠(🔑) 아이콘을 눌러 아래 이름으로 Key를 저장해주세요.
# - TMDB_API_KEY, OPENAI_API_KEY, SPOTIFY_CLIENT_ID,
# - SPOTIFY_CLIENT_SECRET, SPOTIFY_REDIRECT_URI
# ===================================================================

# --- 라이브러리 및 보안 비밀 가져오기 ---
from google.colab import userdata
import spotipy
from spotipy.oauth2 import SpotifyOAuth
import requests
import openai
import json
import os
import re

class MoviPL_Character:
    """
    영화 속 특정 '등장인물'의 내면을 분석하여,
    그를 위한 개인화된 사운드트랙과 '추천 이유'까지 생성하는 MoviPL 엔진 클래스.
    """
    def __init__(self):
        self.tmdb_api_key = None
        self.sp = None
        self.is_ready = False
        self._setup_keys()
        if self.tmdb_api_key and openai.api_key:
            self.sp = self._get_spotify_client()
            if self.sp:
                self.is_ready = True

    def _setup_keys(self):
        try:
            self.tmdb_api_key = userdata.get('TMDB_API_KEY')
            openai.api_key = userdata.get('OPENAI_API_KEY')
            print("✅ TMDB 및 OpenAI API Key 로딩 성공!")
        except Exception as e:
            print(f"❌ API Key 로딩 실패. 코랩 '보안 비밀' 설정을 확인해주세요. 오류: {e}")

    def _get_spotify_client(self):
        try:
            client_id = userdata.get('SPOTIFY_CLIENT_ID')
            client_secret = userdata.get('SPOTIFY_CLIENT_SECRET')
            redirect_uri = userdata.get('SPOTIFY_REDIRECT_URI')
            auth_manager = SpotifyOAuth(client_id=client_id, client_secret=client_secret, redirect_uri=redirect_uri, scope="", open_browser=False)
            auth_url = auth_manager.get_authorize_url()
            print("\n--- Spotify 수동 인증 절차 ---")
            print("1. 아래 URL에 접속하여 권한에 동의하세요.")
            print(f"인증 URL: {auth_url}")
            print("\n2. 권한 동의 후 '연결할 수 없음' 페이지의 전체 URL을 복사하여 아래에 붙여넣어 주세요.")
            redirected_url = input("리디렉션된 URL을 여기에 붙여넣으세요: ")
            code = auth_manager.parse_response_code(redirected_url)
            token_info = auth_manager.get_access_token(code, as_dict=False)
            sp = spotipy.Spotify(auth=token_info)
            print("\n✅ Spotify 인증에 성공했습니다!")
            return sp
        except Exception as e:
            print(f"\n❌ Spotify 인증 중 오류가 발생했습니다. 오류: {e}")
            return None

    def _get_movie_and_character_data(self, movie_title):
        """TMDB에서 영화 정보와 주요 등장인물 목록을 가져옵니다."""
        print(f"\n--- 1. TMDB에서 '{movie_title}' 영화 정보 검색 ---")
        search_url = f"https://api.themoviedb.org/3/search/movie?api_key={self.tmdb_api_key}&query={movie_title}&language=ko-KR"
        try:
            response = requests.get(search_url)
            response.raise_for_status()
            search_results = response.json().get('results')
            if not search_results:
                print(f"-> 오류: '{movie_title}'에 대한 검색 결과가 없습니다.")
                return None, None

            movie = search_results[0]
            movie_id = movie['id']
            overview = movie.get('overview')

            credits_url = f"https://api.themoviedb.org/3/movie/{movie_id}/credits?api_key={self.tmdb_api_key}&language=ko-KR"
            credits_response = requests.get(credits_url)
            credits_response.raise_for_status()
            cast = credits_response.json().get('cast', [])

            characters = [member['character'] for member in cast[:5] if member['character']]

            print(f"-> 영화 검색 완료!")
            return overview, characters
        except requests.exceptions.RequestException as e:
            print(f"-> TMDB API 오류: {e}")
            return None, None

    def _get_character_keywords_from_llm(self, overview, character_name):
        """LLM을 통해 특정 등장인물의 내면을 분석하고 음악적 키워드를 추출합니다."""
        print(f"--- 2. LLM(캐릭터 분석가)으로 '{character_name}'의 내면 분석 ---")
        if not overview: return []

        prompt = f"""
        당신은 심리학자이자 캐릭터 분석 전문가입니다.
        아래 영화 줄거리에서 '{character_name}'이라는 인물에 대해 심층적으로 분석해주세요.
        그의 성격, 동기, 내적 갈등, 그리고 감정의 변화를 종합하여,
        그의 내면을 가장 잘 나타내는 음악적 키워드 5개를 JSON 리스트 형식으로 추출해주세요.

        - 영화 줄거리: {overview}
        """
        try:
            response = openai.chat.completions.create(
                model="gpt-3.5-turbo-1106",
                messages=[
                    {"role": "system", "content": "You are a psychologist and character analyst who translates a character's inner world into musical keywords."},
                    {"role": "user", "content": prompt}
                ],
                response_format={"type": "json_object"}
            )
            result_text = response.choices[0].message.content
            keywords = list(json.loads(result_text).values())[0]
            print(f"-> 추출된 '{character_name}'의 내면 키워드: {keywords}")
            return keywords
        except Exception as e:
            print(f"-> OpenAI API 오류: {e}")
            return []

    def _recommend_music(self, keywords):
        """추출된 키워드로 Spotify에서 음악을 검색하고 중복을 제거하여 추천합니다."""
        print("--- 3. 키워드로 Spotify 음악 추천 ---")
        if not keywords: return []
        try:
            query = " ".join(keywords)
            results = self.sp.search(q=query, type='track', limit=20, market="KR")
            unique_tracks, seen_normalized_titles = [], set()
            for track in results.get('tracks', {}).get('items', []):
                title = track.get('name')
                normalized_title = re.split(r'\(|-', title)[0].strip().lower()
                if normalized_title in seen_normalized_titles: continue
                unique_tracks.append(track)
                seen_normalized_titles.add(normalized_title)
                if len(unique_tracks) >= 5: break
            return unique_tracks
        except Exception as e:
            print(f"-> Spotify API 오류: {e}")
            return []

    def _get_character_recommendation_reason(self, movie_title, character_name, track_title, artist_name):
        """LLM을 통해 캐릭터의 내면과 추천곡이 왜 어울리는지 이유를 생성합니다."""
        prompt = f"""
        당신은 캐릭터의 심리를 음악으로 해석하는 '음악 평론가'입니다.
        영화 <{movie_title}>의 등장인물 '{character_name}'의 내면과,
        아티스트 '{artist_name}'의 노래 <{track_title}>이(가) 어떻게 연결되는지,
        그 이유를 감성적인 한 문장으로 설명해주세요.
        """
        try:
            response = openai.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "You are a music critic who explains the connection between a character's psychology and music."},
                    {"role": "user", "content": prompt}
                ]
            )
            reason = response.choices[0].message.content
            return reason
        except Exception as e:
            print(f"-> 추천 이유 생성 중 오류: {e}")
            return "추천 이유를 생성하는 데 실패했습니다."

    def run(self):
        """사용자와 상호작용하며 등장인물 플레이리스트를 생성합니다."""
        movie_title = input("\n플레이리스트를 만들고 싶은 영화 제목을 입력하세요: ")
        if not movie_title:
            print("-> 영화 제목이 입력되지 않았습니다.")
            return

        overview, characters = self._get_movie_and_character_data(movie_title)
        if not overview or not characters:
            return

        print("\n--- 플레이리스트를 만들고 싶은 인물을 선택해주세요 ---")
        for i, name in enumerate(characters):
            print(f"  {i+1}. {name}")

        try:
            choice = int(input("번호를 입력하세요: ")) - 1
            if not (0 <= choice < len(characters)):
                print("-> 잘못된 번호입니다. 첫 번째 인물을 선택합니다.")
                choice = 0
            selected_character = characters[choice]
        except (ValueError, IndexError):
            print("-> 잘못된 입력입니다. 첫 번째 인물을 선택합니다.")
            selected_character = characters[0]

        keywords = self._get_character_keywords_from_llm(overview, selected_character)
        if not keywords:
            print("-> 키워드를 추출하지 못해 추천을 중단합니다.")
            return

        recommended_tracks = self._recommend_music(keywords)

        print(f"\n✨ '{selected_character}'의 내면 사운드트랙 ✨")
        if not recommended_tracks:
            print("-> 추천할 만한 곡을 찾지 못했습니다.")
            return

        for i, track in enumerate(recommended_tracks):
            title = track.get('name')
            artist = ", ".join([a['name'] for a in track.get('artists', [])])
            print(f"\n🎵 {i+1}. {title} - {artist}")

            reason = self._get_character_recommendation_reason(movie_title, selected_character, title, artist)
            print(f"   - 추천 이유: {reason}")

# --- 메인 실행 부분 ---
if __name__ == "__main__":
    movipl_engine = MoviPL_Character()
    if movipl_engine.is_ready:
        movipl_engine.run()