# -*- coding: utf-8 -*-
"""movipl_engine.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ahIvAcSA9LILkeRE5oRd60EC7k5MUxYj
"""

# MoviPL: LLM 기반 영화 감성-음악 추천 엔진
# AI/데이터분석 부트캠프 4회차 | 2025년 8월 | 유창현

# --- 1. 필요한 라이브러리 가져오기 ---
import spotipy
from spotipy.oauth2 import SpotifyOAuth
import requests
import openai
import json
import os
import re

class MoviPL:
    """
    LLM을 기반으로 영화의 감성과 장르를 분석하여,
    그에 맞는 음악 플레이리스트를 추천하는 MoviPL 엔진 클래스.
    """
    def __init__(self, tmdb_api_key, openai_api_key, spotify_client_id, spotify_client_secret, spotify_redirect_uri):
        """
        클래스가 생성될 때 API Key를 로드하고, Spotify 인증을 수행한다.
        """
        self.tmdb_api_key = tmdb_api_key
        openai.api_key = openai_api_key
        self.sp = None
        self.is_ready = False

        # Spotify 클라이언트 생성 시도
        self.sp = self._get_spotify_client(spotify_client_id, spotify_client_secret, spotify_redirect_uri)
        if self.sp:
            self.is_ready = True

    def _get_spotify_client(self, client_id, client_secret, redirect_uri):
        """수동 인증 방식으로 Spotify API 클라이언트를 생성한다."""
        try:
            auth_manager = SpotifyOAuth(
                client_id=client_id,
                client_secret=client_secret,
                redirect_uri=redirect_uri,
                scope="",
                open_browser=False
            )
            auth_url = auth_manager.get_authorize_url()
            print("\n--- Spotify 수동 인증 절차 ---")
            print("1. 아래 URL에 접속하여 권한에 동의하세요.")
            print(f"인증 URL: {auth_url}")
            print("\n2. 권한 동의 후 '연결할 수 없음' 페이지의 전체 URL을 복사하여 아래에 붙여넣어 주세요.")
            redirected_url = input("리디렉션된 URL을 여기에 붙여넣으세요: ")

            code = auth_manager.parse_response_code(redirected_url)
            token_info = auth_manager.get_access_token(code, as_dict=False)
            sp = spotipy.Spotify(auth=token_info)
            print("\n✅ Spotify 인증에 성공했습니다!")
            return sp
        except Exception as e:
            print(f"\n❌ Spotify 인증 중 오류가 발생했습니다. 오류: {e}")
            return None

    def _get_movie_data(self, movie_title):
        """TMDB에서 영화 줄거리와 장르를 가져온다."""
        print(f"\n--- 1. TMDB에서 '{movie_title}' 영화 정보 검색 ---")
        search_url = f"https://api.themoviedb.org/3/search/movie?api_key={self.tmdb_api_key}&query={movie_title}&language=ko-KR"
        genre_url = f"https://api.themoviedb.org/3/genre/movie/list?api_key={self.tmdb_api_key}&language=ko-KR"
        try:
            genre_response = requests.get(genre_url)
            genre_response.raise_for_status()
            genre_dict = {genre['id']: genre['name'] for genre in genre_response.json()['genres']}
            response = requests.get(search_url)
            response.raise_for_status()
            search_results = response.json().get('results')
            if not search_results:
                print(f"-> 오류: '{movie_title}'에 대한 검색 결과가 없습니다.")
                return None, None
            movie = search_results[0]
            genre_names = [genre_dict.get(gid) for gid in movie.get('genre_ids', []) if genre_dict.get(gid)]
            print(f"-> 영화 검색 완료! (장르: {', '.join(genre_names)})")
            return movie.get('overview'), genre_names
        except requests.exceptions.RequestException as e:
            print(f"-> TMDB API 오류: {e}")
            return None, None

    def _get_llm_keywords(self, overview, genres):
        """LLM을 통해 영화의 감성 및 장르 키워드를 추출한다."""
        print("--- 2. LLM(시네마틱 큐레이터)으로 키워드 추출 ---")
        if not overview: return []
        prompt = f"""당신은 영화의 서사와 장르를 분석하여 그 핵심 분위기를 음악적 키워드로 연결하는 최고의 '시네마틱 큐레이터'입니다.
        아래 영화 정보를 바탕으로, 이 영화와 가장 잘 어울리는 음악을 찾는 데 사용할 영어 키워드 5개를 JSON 리스트 형식으로 추출해주세요.
        - 영화 장르: {", ".join(genres)}
        - 영화 줄거리: {overview}"""
        try:
            response = openai.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "You are a cinematic music curator."},
                    {"role": "user", "content": prompt}
                ],
                response_format={"type": "json_object"}
            )
            result_text = response.choices[0].message.content
            keywords = list(json.loads(result_text).values())[0]
            print(f"-> 추출된 큐레이션 키워드: {keywords}")
            return keywords
        except Exception as e:
            print(f"-> OpenAI API 오류: {e}")
            return []

    def _recommend_music(self, keywords):
        """추출된 키워드로 Spotify에서 음악을 검색하고 중복을 제거하여 추천한다."""
        print("--- 3. 큐레이션 키워드로 Spotify 음악 추천 ---")
        if not keywords: return []
        try:
            query = " ".join(keywords)
            results = self.sp.search(q=query, type='track', limit=20, market="KR")
            unique_tracks, seen_normalized_titles = [], set()
            for track in results.get('tracks', {}).get('items', []):
                title = track.get('name')
                normalized_title = re.split(r'\(|-', title)[0].strip().lower()
                if normalized_title in seen_normalized_titles: continue
                unique_tracks.append(track)
                seen_normalized_titles.add(normalized_title)
                if len(unique_tracks) >= 5: break
            return unique_tracks
        except Exception as e:
            print(f"-> Spotify API 오류: {e}")
            return []

    def generate_playlist(self, movie_title):
        """하나의 영화 제목을 받아, 전체 추천 파이프라인을 실행하고 결과를 출력한다."""
        overview, genres = self._get_movie_data(movie_title)
        if not overview: return

        keywords = self._get_llm_keywords(overview, genres)
        if not keywords:
            print("-> 키워드를 추출하지 못해 추천을 중단합니다.")
            return

        recommended_tracks = self._recommend_music(keywords)
        print("\n✨ 최종 추천 플레이리스트 ✨")
        if not recommended_tracks:
            print("-> 추천할 만한 곡을 찾지 못했습니다.")
            return
        for i, track in enumerate(recommended_tracks):
            title = track.get('name')
            artist = ", ".join([a['name'] for a in track.get('artists', [])])
            print(f"  {i+1}. {title} - {artist}")

# ===================================================================
# ✅ 메인 실행 부분 (사용 예시)
# ===================================================================
if __name__ == "__main__":
    # [중요!] 이 코드를 로컬 환경에서 실행할 경우,
    # os.getenv()를 사용하여 환경 변수에서 API Key를 불러오는 것이 안전합니다.
    # 예: TMDB_API_KEY = os.getenv("TMDB_API_KEY")
    TMDB_API_KEY = "YOUR_TMDB_API_KEY"
    OPENAI_API_KEY = "YOUR_OPENAI_API_KEY"
    SPOTIFY_CLIENT_ID = "YOUR_SPOTIFY_CLIENT_ID"
    SPOTIFY_CLIENT_SECRET = "YOUR_SPOTIFY_CLIENT_SECRET"
    SPOTIFY_REDIRECT_URI = "YOUR_SPOTIFY_REDIRECT_URI" # 예: http://localhost:8888

    # 1. MoviPL 엔진 객체 생성
    movipl_engine = MoviPL(
        tmdb_api_key=TMDB_API_KEY,
        openai_api_key=OPENAI_API_KEY,
        spotify_client_id=SPOTIFY_CLIENT_ID,
        spotify_client_secret=SPOTIFY_CLIENT_SECRET,
        spotify_redirect_uri=SPOTIFY_REDIRECT_URI
    )

    # 2. 엔진이 준비되면, 사용자 입력을 받아 실행
    if movipl_engine.is_ready:
        try:
            movie_to_search = input("\n플레이리스트를 추천받고 싶은 영화 제목을 입력하세요: ")
            if movie_to_search:
                movipl_engine.generate_playlist(movie_to_search)
        except KeyboardInterrupt:
            print("\n프로그램을 종료합니다.")